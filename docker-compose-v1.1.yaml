version: "3.8"

services:
  # user Service (Spring Boot)
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:h2:mem:userdb
      - SPRING_DATASOURCE_USERNAME=sa
      - SPRING_DATASOURCE_PASSWORD=
    networks:
      - food-delivery-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # restaurant Service
  restaurant-service:
    build:
      context: ./restaurant-service
      dockerfile: Dockerfile
    container_name: restaurant-service
    ports:
      - "8081:8081"
    networks:
      - food-delivery-network
    depends_on:
      - user-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "8082:8082"
    networks:
      - food-delivery-network
    depends_on:
      - user-service
      - restaurant-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # payment Service
  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    ports:
      - "8083:8083"
    networks:
      - food-delivery-network
    depends_on:
      - order-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # delivery Service
  delivery-service:
    build:
      context: ./delivery-service
      dockerfile: Dockerfile
    container_name: delivery-service
    ports:
      - "8084:8084"
    networks:
      - food-delivery-network
    depends_on:
      - order-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # notification Service
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "8085:8085"
    networks:
      - food-delivery-network
    depends_on:
      - user-service
      - order-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # frontend
  frontend:
    build:
      context: ./client-frontend-service-demo/frontend_angular/quick-bite-frontend-v1.1
      dockerfile: Dockerfile
    container_name: quick-bite-frontend
    ports:
      - "${FRONTEND_PORT:-3205}:80"
    environment:
      - API_BASE_URL=http://localhost:8080
      - RESTAURANTS_SERVICE_URL=http://localhost:8081
      - ORDERS_SERVICE_URL=http://localhost:8082
      - PAYMENTS_SERVICE_URL=http://localhost:8083
      - DELIVERIES_SERVICE_URL=http://localhost:8084
      - NOTIFICATIONS_SERVICE_URL=http://localhost:8085
      - FRONTEND_PORT=3205
      - NGINX_PORT=80
    networks:
      - food-delivery-network
    depends_on:
      - user-service
      - restaurant-service
      - order-service
      - payment-service
      - delivery-service
      - notification-service
  cleanup:
    image: docker:cli
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: docker image prune -f
    depends_on:
      - user-service
      - restaurant-service
      - order-service
      - payment-service
      - delivery-service
      - notification-service
      - frontend

networks:
  food-delivery-network:
    driver: bridge
